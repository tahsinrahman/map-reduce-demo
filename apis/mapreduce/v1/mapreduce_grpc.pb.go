// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: mapreduce/v1/mapreduce.proto

package mapreducev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapReduceServiceClient is the client API for MapReduceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceServiceClient interface {
	AskForMapTask(ctx context.Context, in *AskForMapTaskRequest, opts ...grpc.CallOption) (MapReduceService_AskForMapTaskClient, error)
	AskForReduceTask(ctx context.Context, in *AskForReduceTaskRequest, opts ...grpc.CallOption) (MapReduceService_AskForReduceTaskClient, error)
	FinishMapTask(ctx context.Context, in *FinishMapTaskRequest, opts ...grpc.CallOption) (*FinishMapTaskResponse, error)
	FinishReduceTask(ctx context.Context, in *FinishReduceTaskRequest, opts ...grpc.CallOption) (*FinishReduceTaskResponse, error)
}

type mapReduceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceServiceClient(cc grpc.ClientConnInterface) MapReduceServiceClient {
	return &mapReduceServiceClient{cc}
}

func (c *mapReduceServiceClient) AskForMapTask(ctx context.Context, in *AskForMapTaskRequest, opts ...grpc.CallOption) (MapReduceService_AskForMapTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &MapReduceService_ServiceDesc.Streams[0], "/mapreduce.v1.MapReduceService/AskForMapTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapReduceServiceAskForMapTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapReduceService_AskForMapTaskClient interface {
	Recv() (*AskForMapTaskResponse, error)
	grpc.ClientStream
}

type mapReduceServiceAskForMapTaskClient struct {
	grpc.ClientStream
}

func (x *mapReduceServiceAskForMapTaskClient) Recv() (*AskForMapTaskResponse, error) {
	m := new(AskForMapTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapReduceServiceClient) AskForReduceTask(ctx context.Context, in *AskForReduceTaskRequest, opts ...grpc.CallOption) (MapReduceService_AskForReduceTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &MapReduceService_ServiceDesc.Streams[1], "/mapreduce.v1.MapReduceService/AskForReduceTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapReduceServiceAskForReduceTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapReduceService_AskForReduceTaskClient interface {
	Recv() (*AskForReduceTaskResponse, error)
	grpc.ClientStream
}

type mapReduceServiceAskForReduceTaskClient struct {
	grpc.ClientStream
}

func (x *mapReduceServiceAskForReduceTaskClient) Recv() (*AskForReduceTaskResponse, error) {
	m := new(AskForReduceTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapReduceServiceClient) FinishMapTask(ctx context.Context, in *FinishMapTaskRequest, opts ...grpc.CallOption) (*FinishMapTaskResponse, error) {
	out := new(FinishMapTaskResponse)
	err := c.cc.Invoke(ctx, "/mapreduce.v1.MapReduceService/FinishMapTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceServiceClient) FinishReduceTask(ctx context.Context, in *FinishReduceTaskRequest, opts ...grpc.CallOption) (*FinishReduceTaskResponse, error) {
	out := new(FinishReduceTaskResponse)
	err := c.cc.Invoke(ctx, "/mapreduce.v1.MapReduceService/FinishReduceTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceServiceServer is the server API for MapReduceService service.
// All implementations should embed UnimplementedMapReduceServiceServer
// for forward compatibility
type MapReduceServiceServer interface {
	AskForMapTask(*AskForMapTaskRequest, MapReduceService_AskForMapTaskServer) error
	AskForReduceTask(*AskForReduceTaskRequest, MapReduceService_AskForReduceTaskServer) error
	FinishMapTask(context.Context, *FinishMapTaskRequest) (*FinishMapTaskResponse, error)
	FinishReduceTask(context.Context, *FinishReduceTaskRequest) (*FinishReduceTaskResponse, error)
}

// UnimplementedMapReduceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMapReduceServiceServer struct {
}

func (UnimplementedMapReduceServiceServer) AskForMapTask(*AskForMapTaskRequest, MapReduceService_AskForMapTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method AskForMapTask not implemented")
}
func (UnimplementedMapReduceServiceServer) AskForReduceTask(*AskForReduceTaskRequest, MapReduceService_AskForReduceTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method AskForReduceTask not implemented")
}
func (UnimplementedMapReduceServiceServer) FinishMapTask(context.Context, *FinishMapTaskRequest) (*FinishMapTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMapTask not implemented")
}
func (UnimplementedMapReduceServiceServer) FinishReduceTask(context.Context, *FinishReduceTaskRequest) (*FinishReduceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishReduceTask not implemented")
}

// UnsafeMapReduceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceServiceServer will
// result in compilation errors.
type UnsafeMapReduceServiceServer interface {
	mustEmbedUnimplementedMapReduceServiceServer()
}

func RegisterMapReduceServiceServer(s grpc.ServiceRegistrar, srv MapReduceServiceServer) {
	s.RegisterService(&MapReduceService_ServiceDesc, srv)
}

func _MapReduceService_AskForMapTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AskForMapTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapReduceServiceServer).AskForMapTask(m, &mapReduceServiceAskForMapTaskServer{stream})
}

type MapReduceService_AskForMapTaskServer interface {
	Send(*AskForMapTaskResponse) error
	grpc.ServerStream
}

type mapReduceServiceAskForMapTaskServer struct {
	grpc.ServerStream
}

func (x *mapReduceServiceAskForMapTaskServer) Send(m *AskForMapTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MapReduceService_AskForReduceTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AskForReduceTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapReduceServiceServer).AskForReduceTask(m, &mapReduceServiceAskForReduceTaskServer{stream})
}

type MapReduceService_AskForReduceTaskServer interface {
	Send(*AskForReduceTaskResponse) error
	grpc.ServerStream
}

type mapReduceServiceAskForReduceTaskServer struct {
	grpc.ServerStream
}

func (x *mapReduceServiceAskForReduceTaskServer) Send(m *AskForReduceTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MapReduceService_FinishMapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMapTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServiceServer).FinishMapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce.v1.MapReduceService/FinishMapTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServiceServer).FinishMapTask(ctx, req.(*FinishMapTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceService_FinishReduceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishReduceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceServiceServer).FinishReduceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce.v1.MapReduceService/FinishReduceTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceServiceServer).FinishReduceTask(ctx, req.(*FinishReduceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduceService_ServiceDesc is the grpc.ServiceDesc for MapReduceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce.v1.MapReduceService",
	HandlerType: (*MapReduceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinishMapTask",
			Handler:    _MapReduceService_FinishMapTask_Handler,
		},
		{
			MethodName: "FinishReduceTask",
			Handler:    _MapReduceService_FinishReduceTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AskForMapTask",
			Handler:       _MapReduceService_AskForMapTask_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AskForReduceTask",
			Handler:       _MapReduceService_AskForReduceTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mapreduce/v1/mapreduce.proto",
}
